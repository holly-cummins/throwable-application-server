/*
 */



buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath files('gradle/wlp-anttasks.jar')
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:1.0.1'
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'liberty'

// In this section you declare where to find the dependencies of your project
repositories {
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    maven {
            url "https://repo.eclipse.org/content/repositories/paho-snapshots/"
           }
}

configurations {
 derby
}

// In this section you declare the dependencies for your production and test code
dependencies {
	compile project(":pcduino-sensors")
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.+'
	compile 'org.json:json:20151123'
    compile 'com.ibm.messaging:watson-iot:0.1.3'
	providedCompile 'javax.websocket:javax.websocket-api:1.1'
	providedCompile 'javax.ejb:javax.ejb-api:3.2'
    providedCompile group:'javax.servlet', name:'javax.servlet-api', version:'3.1.0'
    providedCompile group:'javax.ws.rs', name:'javax.ws.rs-api', version: '2.0.1'
    providedCompile group:'javax.enterprise', name:'cdi-api', version:'1.2'
    providedCompile group:'javax.json', name:'javax.json-api', version:'1.0'
    providedCompile group:'javax.transaction', name:'jta', version:'1.1'
    providedCompile group:'org.eclipse.persistence', name:'javax.persistence', version:'2.0.0'
    providedCompile group:'com.ibm.websphere.appserver.api', name:'com.ibm.websphere.appserver.api.json', version:'1.0'
    // Use webjars to manage javascript dependencies
    compile 'org.webjars:bootstrap:3.3.1'
    compile 'org.webjars:c3:0.4.11'
    derby "org.apache.derby:derby:10.12.1.1"
  }

liberty {

    installDir = buildDir.path + '/wlp/'
    userDir = projectDir.path + '/../liberty-usr/'
    serverName = 'pollServer'
      
    packageLiberty {
        include = 'usr'
        archive = buildDir.path + '/packagedServer.zip'
    }
}

task deployToLiberty(type: Copy, dependsOn: ['war', 'deployDependenciesToLiberty']) {
    from war.archivePath 
    into "${liberty.userDir}/servers/${liberty.serverName}/apps"

}

task deployDependenciesToLiberty() << {
   String derbyDir = "${liberty.userDir}/shared/resources/derby"
   new File(derbyDir).mkdirs();
      configurations.derby.resolve().each { file ->
        //Copy the file to the desired location
        copy {
          from file 
          into derbyDir
          // Strip off version numbers
          rename '(.+)-[\\.0-9]+\\.(.+)', '$1.$2'
        }
      }
}

libertyPackage.mustRunAfter installFeature
libertyPackage.mustRunAfter deployToLiberty
deployToLiberty.mustRunAfter installLiberty

task packageServer(dependsOn: ['installLiberty', 'deployToLiberty', 'libertyPackage' ]) {
}

task runServer(dependsOn: ['installLiberty', 'deployToLiberty', 'libertyStart' ]) {
}
defaultTasks 'war'


